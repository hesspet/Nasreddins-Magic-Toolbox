@page "/tarot"
@using System.Linq

<PageTitle>Tarotkarten</PageTitle>

<h1>Tarotkarte anzeigen</h1>

<p>Gib den Namen einer Karte ein, zum Beispiel <em>Fool</em>, <em>Arcane Major 07 Chariot</em> oder <em>Cups05</em>. Die passende Illustration wird automatisch geladen.</p>

<div class="tarot-search">
    <label class="form-label" for="cardNameInput">Kartennamen</label>
    <input id="cardNameInput"
           class="form-control"
           @bind="SearchTerm"
           @bind:event="oninput"
           placeholder="Kartennamen eingeben" />
</div>

@if (HasSearched && selectedCard is null)
{
    <p class="text-danger">Keine Karte gefunden. Überprüfe die Schreibweise.</p>
}

@if (selectedCard is not null)
{
    <figure class="tarot-card">
        <img src="@selectedCard.ImagePath" alt="@selectedCard.DisplayName" class="img-fluid" />
        <figcaption>@selectedCard.DisplayName</figcaption>
    </figure>
}

@code {
    private string searchTerm = string.Empty;
    private TarotCard? selectedCard;
    private bool HasSearched => !string.IsNullOrWhiteSpace(searchTerm);

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm == value)
            {
                return;
            }

            searchTerm = value ?? string.Empty;
            UpdateSelection();
        }
    }

    private static readonly IReadOnlyList<TarotCard> Cards = new List<TarotCard>
    {
        new TarotCard("Arcane Major 00 Fool", "Arcane_Major_00_Fool.jpg"),
        new TarotCard("Arcane Major 01 Magician", "Arcane_Major_01_Magician.jpg"),
        new TarotCard("Arcane Major 02 High Priestess", "Arcane_Major_02_High_Priestess.jpg"),
        new TarotCard("Arcane Major 03 Empress", "Arcane_Major_03_Empress.jpg"),
        new TarotCard("Arcane Major 04 Emperor", "Arcane_Major_04_Emperor.jpg"),
        new TarotCard("Arcane Major 05 Hierophant", "Arcane_Major_05_Hierophant.jpg"),
        new TarotCard("Arcane Major 06 Lovers", "Arcane_Major_06_Lovers.jpg"),
        new TarotCard("Arcane Major 07 Chariot", "Arcane_Major_07_Chariot.jpg"),
        new TarotCard("Arcane Major 08 Strength", "Arcane_Major_08_Strength.jpg"),
        new TarotCard("Arcane Major 09 Hermit", "Arcane_Major_09_Hermit.jpg"),
        new TarotCard("Arcane Major 10 Wheel of Fortune", "Arcane_Major_10_Wheel_of_Fortune.jpg"),
        new TarotCard("Arcane Major 11 Justice", "Arcane_Major_11_Justice.jpg"),
        new TarotCard("Arcane Major 12 Hanged Man", "Arcane_Major_12_Hanged_Man.jpg"),
        new TarotCard("Arcane Major 13 Death", "Arcane_Major_13_Death.jpg"),
        new TarotCard("Arcane Major 14 Temperance", "Arcane_Major_14_Temperance.jpg"),
        new TarotCard("Arcane Major 15 Devil", "Arcane_Major_15_Devil.jpg"),
        new TarotCard("Arcane Major 16 Tower", "Arcane_Major_16_Tower.jpg"),
        new TarotCard("Arcane Major 17 Star", "Arcane_Major_17_Star.jpg"),
        new TarotCard("Arcane Major 18 Moon", "Arcane_Major_18_Moon.jpg"),
        new TarotCard("Arcane Major 19 Sun", "Arcane_Major_19_Sun.jpg"),
        new TarotCard("Arcane Major 20 Judgement", "Arcane_Major_20_Judgement.jpg"),
        new TarotCard("Arcane Major 21 World", "Arcane_Major_21_World.jpg"),
        new TarotCard("Cups01", "Cups01.jpg"),
        new TarotCard("Cups02", "Cups02.jpg"),
        new TarotCard("Cups03", "Cups03.jpg"),
        new TarotCard("Cups04", "Cups04.jpg"),
        new TarotCard("Cups05", "Cups05.jpg"),
        new TarotCard("Cups06", "Cups06.jpg"),
        new TarotCard("Cups07", "Cups07.jpg"),
        new TarotCard("Cups08", "Cups08.jpg"),
        new TarotCard("Cups09", "Cups09.jpg"),
        new TarotCard("Cups10", "Cups10.jpg"),
        new TarotCard("Cups11", "Cups11.jpg"),
        new TarotCard("Cups12", "Cups12.jpg"),
        new TarotCard("Cups13", "Cups13.jpg"),
        new TarotCard("Cups14", "Cups14.jpg"),
        new TarotCard("Pents01", "Pents01.jpg"),
        new TarotCard("Pents02", "Pents02.jpg"),
        new TarotCard("Pents03", "Pents03.jpg"),
        new TarotCard("Pents04", "Pents04.jpg"),
        new TarotCard("Pents05", "Pents05.jpg"),
        new TarotCard("Pents06", "Pents06.jpg"),
        new TarotCard("Pents07", "Pents07.jpg"),
        new TarotCard("Pents08", "Pents08.jpg"),
        new TarotCard("Pents09", "Pents09.jpg"),
        new TarotCard("Pents10", "Pents10.jpg"),
        new TarotCard("Pents11", "Pents11.jpg"),
        new TarotCard("Pents12", "Pents12.jpg"),
        new TarotCard("Pents13", "Pents13.jpg"),
        new TarotCard("Pents14", "Pents14.jpg"),
        new TarotCard("Swords01", "Swords01.jpg"),
        new TarotCard("Swords02", "Swords02.jpg"),
        new TarotCard("Swords03", "Swords03.jpg"),
        new TarotCard("Swords04", "Swords04.jpg"),
        new TarotCard("Swords05", "Swords05.jpg"),
        new TarotCard("Swords06", "Swords06.jpg"),
        new TarotCard("Swords07", "Swords07.jpg"),
        new TarotCard("Swords08", "Swords08.jpg"),
        new TarotCard("Swords09", "Swords09.jpg"),
        new TarotCard("Swords10", "Swords10.jpg"),
        new TarotCard("Swords11", "Swords11.jpg"),
        new TarotCard("Swords12", "Swords12.jpg"),
        new TarotCard("Swords13", "Swords13.jpg"),
        new TarotCard("Swords14", "Swords14.jpg"),
        new TarotCard("Wands01", "Wands01.jpg"),
        new TarotCard("Wands02", "Wands02.jpg"),
        new TarotCard("Wands03", "Wands03.jpg"),
        new TarotCard("Wands04", "Wands04.jpg"),
        new TarotCard("Wands05", "Wands05.jpg"),
        new TarotCard("Wands06", "Wands06.jpg"),
        new TarotCard("Wands07", "Wands07.jpg"),
        new TarotCard("Wands08", "Wands08.jpg"),
        new TarotCard("Wands09", "Wands09.jpg"),
        new TarotCard("Wands10", "Wands10.jpg"),
        new TarotCard("Wands11", "Wands11.jpg"),
        new TarotCard("Wands12", "Wands12.jpg"),
        new TarotCard("Wands13", "Wands13.jpg"),
        new TarotCard("Wands14", "Wands14.jpg"),
    };

    private void UpdateSelection()
    {
        selectedCard = null;

        var normalized = NormalizeForComparison(searchTerm);
        if (normalized.Length == 0)
        {
            return;
        }

        selectedCard = Cards.FirstOrDefault(card => card.ComparisonKey.Contains(normalized, StringComparison.OrdinalIgnoreCase));
    }

    private static string NormalizeForComparison(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return string.Empty;
        }

        var filtered = value.Where(char.IsLetterOrDigit)
                            .Select(char.ToLowerInvariant);
        return string.Concat(filtered);
    }

    private sealed record TarotCard(string DisplayName, string FileName)
    {
        public string ImagePath => $"images/TarotDeck_Wikipedia/{FileName}";
        public string ComparisonKey => NormalizeForComparison(DisplayName);
    }
}
