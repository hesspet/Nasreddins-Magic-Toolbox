@inject LocalStorageHelper LocalStorage
@inject NavigationManager NavigationManager

@if (isSplashVisible)
{
    <div class="splash-screen" role="dialog" aria-modal="true" aria-live="polite" @onclick="SkipSplash">
        <div class="splash-content">
            <img src="@SplashImageUrl" alt="Nasreddin und Peter" class="splash-image" />
            <div class="splash-text">
                <p>Willkommen bei Nasreddins Magic Toolbox.</p>
                <p>Mach es dir bequem und lass dich Ã¼berraschen.</p>
                <p>Der Start erfolgt in wenigen Augenblicken.</p>
                <!-- <p>@SplashImageUrl</p> -->
                <p>Version: @BuildInfo.Version (Build: @BuildInfo.BuildNumber)</p>
                <p>Build vom @BuildInfo.BuildTimestamp</p>
            </div>
        </div>
    </div>
}
else
{
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>@DisplayTexts.NotFoundPageTitle</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">@DisplayTexts.NotFoundMessage</p>
            </LayoutView>
        </NotFound>
    </Router>
}

@code {
    private bool isSplashVisible = true;
    private int splashDurationSeconds = ApplicationSettings.SplashScreenDurationDefaultSeconds;
    private Task? initializationTask;
    private string SplashImageUrl => $"{NavigationManager.BaseUri}images/SplashNassredinIconTrimmed.png";

    protected override Task OnInitializedAsync()
    {
        initializationTask = InitializeSplashDurationAsync();
        return initializationTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (initializationTask is not null)
            {
                await initializationTask;
            }

            await Task.Delay(TimeSpan.FromSeconds(splashDurationSeconds));

            if (isSplashVisible)
            {
                isSplashVisible = false;
                StateHasChanged();
            }
        }
    }

    private async Task InitializeSplashDurationAsync()
    {
        var storedDuration = await LocalStorage.GetItemAsync<int?>(ApplicationSettings.SplashScreenDurationKey);

        if (storedDuration.HasValue &&
            Array.IndexOf(ApplicationSettings.SplashScreenDurationOptions, storedDuration.Value) >= 0)
        {
            splashDurationSeconds = storedDuration.Value;
        }
        else
        {
            await LocalStorage.SetItemAsync(ApplicationSettings.SplashScreenDurationKey, splashDurationSeconds);
        }
    }

    private void SkipSplash()
    {
        if (isSplashVisible)
        {
            isSplashVisible = false;
        }
    }
}
