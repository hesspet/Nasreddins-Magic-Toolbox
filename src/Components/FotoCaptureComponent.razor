@using Microsoft.AspNetCore.Components.Forms
@using System
@using System.IO
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject TemporaryImageStorage ImageStorage

<InputFile id="@_fileInputElementId" class="foto-capture-input" accept="image/*" capture="environment" style="display:none" OnChange="HandleFileSelected" />

@code {
    private const long MaxUploadSize = 10 * 1024 * 1024;
    private readonly string _fileInputElementId = $"fotoCaptureInput_{Guid.NewGuid():N}";
    private IJSObjectReference? _module;
    private string? _currentImageId;

    [Parameter]
    public EventCallback<string> OnPhotoCaptured { get; set; }

    public async Task TriggerCaptureAsync()
    {
        _module ??= await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/cameraCapture.js");
        await _module.InvokeVoidAsync("triggerFileInput", _fileInputElementId);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs args)
    {
        var file = args.File;
        if (file is null)
        {
            return;
        }

        await using var readStream = file.OpenReadStream(MaxUploadSize);
        using var memoryStream = new MemoryStream();
        await readStream.CopyToAsync(memoryStream);

        ImageStorage.Remove(_currentImageId);
        var imageId = ImageStorage.StoreImage(memoryStream.ToArray(), file.ContentType);
        _currentImageId = imageId;

        if (OnPhotoCaptured.HasDelegate)
        {
            await OnPhotoCaptured.InvokeAsync(imageId);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            await _module.DisposeAsync();
        }

        ImageStorage.Remove(_currentImageId);
    }
}
