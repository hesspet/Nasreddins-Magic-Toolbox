@page "/kartenlegen/tarot-drei-karten-legung"
@using Toolbox.Helpers

<PageTitle>@DisplayTexts.CardReadingThreeCardPageTitle</PageTitle>

@inject IndexedDbHelper DbHelper

<DeckSelectionBar IsLoading="isLoadingDecks"
                  DeckOptions="DeckOptions"
                  @bind-SelectedDeck="SelectedDeck"
                  ShowSearchButton="true"
                  SearchEnabled="IsSearchEnabled"
                  OnSearchRequested="HandleSearchRequested" />

<h1>@DisplayTexts.CardReadingThreeCardPageHeader</h1>

<p>@DisplayTexts.CardReadingContentPlaceholder</p>

@if (isLoadingCards && HasSelectedDeck)
{
    <div class="deck-loading" role="status" aria-live="polite">
        <div class="spinner-border text-primary me-3" aria-hidden="true"></div>
        <span class="deck-loading-text">@DisplayTexts.TarotDeckLoading</span>
    </div>
}

<TarotCardTable @ref="cardTableRef"
                Spread="TarotSpreadDefinitions.ThreeCards"
                ShowCards="CanShowCards"
                SelectedDeckId="SelectedDeck" />

@code {
    private TarotCardTable? cardTableRef;
    private IReadOnlyList<DeckOption> deckOptions = Array.Empty<DeckOption>();
    private bool isLoadingDecks = true;
    private bool isLoadingCards;
    private string selectedDeck = string.Empty;
    private string? pendingDeckId;
    private long deckLoadRequestId;

    [CascadingParameter]
    private MainLayout? Layout { get; set; }

    private IEnumerable<DeckOption> DeckOptions => deckOptions;

    private string SelectedDeck
    {
        get => selectedDeck;
        set
        {
            var newValue = value ?? string.Empty;
            if (string.Equals(selectedDeck, newValue, StringComparison.Ordinal))
            {
                return;
            }

            selectedDeck = newValue;
            _ = PreloadSelectedDeckAsync(newValue);
        }
    }

    private bool IsSearchEnabled => HasSelectedDeck && !isLoadingCards;

    private bool HasSelectedDeck => !string.IsNullOrWhiteSpace(selectedDeck);

    private bool CanShowCards => HasSelectedDeck && !isLoadingCards;

    protected override void OnInitialized()
    {
        Layout?.UpdateCurrentPageTitle(DisplayTexts.CardReadingThreeCardPageTitle);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        isLoadingDecks = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            await LoadDecksAsync();
        }
        finally
        {
            isLoadingDecks = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!string.IsNullOrWhiteSpace(pendingDeckId) && cardTableRef is not null)
        {
            var deckId = pendingDeckId;
            pendingDeckId = null;
            await PreloadSelectedDeckAsync(deckId);
        }
    }

    private async Task LoadDecksAsync()
    {
        await DbHelper.InitializeAsync();
        var decks = await DbHelper.GetAllDecksAsync();
        deckOptions = decks.Where(deck => !string.IsNullOrWhiteSpace(deck?.Id))
                           .Select(deck =>
                           {
                               var deckId = deck!.Id!;
                               var name = string.IsNullOrWhiteSpace(deck.Name) ? deckId : deck.Name!;
                               return new DeckOption(deckId, CreateDeckDisplayName(name));
                           })
                           .OrderBy(option => option.DisplayName, StringComparer.OrdinalIgnoreCase)
                           .ToList();
        selectedDeck = string.Empty;
    }

    private async Task PreloadSelectedDeckAsync(string deckId)
    {
        if (string.IsNullOrWhiteSpace(deckId))
        {
            isLoadingCards = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        if (cardTableRef is null)
        {
            pendingDeckId = deckId;
            return;
        }

        pendingDeckId = null;
        var requestId = ++deckLoadRequestId;

        isLoadingCards = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            await cardTableRef.PreloadDeckAsync(deckId).ConfigureAwait(false);
        }
        finally
        {
            if (requestId == deckLoadRequestId)
            {
                isLoadingCards = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private Task HandleSearchRequested() => Task.CompletedTask;

    private static string CreateDeckDisplayName(string deckName) => CardSearchHelper.CreateDeckDisplayName(deckName);
}
