@page "/tarot"
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Markdig
@using Toolbox.Helpers
@using Toolbox.Models
@inject IndexedDbHelper DbHelper
@inject IJSRuntime JsRuntime
@inject LocalStorageHelper LocalStorage

<PageTitle>@DisplayTexts.TarotPageTitle</PageTitle>

@if (isLoadingDecks)
{
    <div class="tarot-loading" role="status" aria-live="polite">
        <div class="spinner-border text-primary me-3" aria-hidden="true"></div>
        <span class="tarot-loading-text">@DisplayTexts.TarotDeckLoading</span>
    </div>
}
else
{
    <div class="tarot-search">
        <select id="deckSelection"
                class="form-select"
                title="@DisplayTexts.TarotDeckSelectionPlaceholder"
                aria-label="@DisplayTexts.TarotDeckSelectionLabel"
                @bind="SelectedDeck">
            <option value="">@DisplayTexts.TarotDeckSelectionLabel</option>
            @foreach (var option in DeckOptions)
            {
                <option value="@option.DeckId">@option.DisplayName</option>
            }
        </select>

    <div class="tarot-page">
              <div class="tarot-search">
            <input id="cardNameInput"
                   class="form-control"
                   @bind="SearchTerm"
                   @bind:event="oninput"
                   placeholder="@DisplayTexts.TarotSearchLabel"
                   title="@DisplayTexts.TarotSearchPlaceholder"
                   aria-label="@DisplayTexts.TarotSearchLabel"
                   disabled="@(!IsSearchEnabled)" />
        </div>

        </div>

        @if (selectedCard is not null)
        {
            <div class="tarot-search tarot-scroll-control">
                <button type="button"
                        class="btn btn-outline-primary tarot-scroll-button"
                        title="@DisplayTexts.TarotScrollToDescriptionLabel"
                        aria-controls="@CardDescriptionElementId"
                        @onclick="ScrollToDescriptionAsync">
                    <span aria-hidden="true">⬇️</span>
                    <span class="visually-hidden">@DisplayTexts.TarotScrollToDescriptionLabel</span>
                </button>
            </div>
        }

        @if (HasSearched && selectedCard is null && !isLoadingCards)
        {
            <p class="text-danger">@DisplayTexts.TarotSearchNotFound</p>
        }

        @if (isLoadingCards && IsDeckSelected)
        {
            <div class="tarot-loading" role="status" aria-live="polite">
                <div class="spinner-border text-primary me-3" aria-hidden="true"></div>
                <span class="tarot-loading-text">@DisplayTexts.TarotDeckLoading</span>
            </div>
        }
        else if (selectedCard is not null)
        {
            <figure class="tarot-card"
                    id="@CardFigureElementId"
                    @ref="cardFigureRef"
                    data-fullscreen="@CardFigureFullscreenValue"
                    style="@CardFigureStyle"
                    role="button"
                    tabindex="0"
                    aria-pressed="@CardFigureFullscreenValue"
                    aria-label="@DisplayTexts.TarotToggleFullscreenLabel"
                    title="@DisplayTexts.TarotToggleFullscreenLabel"
                    @onclick="ToggleCardFullscreen"
                    @onkeydown="HandleCardKeyDown">
                <img src="@selectedCard.ImageDataUrl" alt="@selectedCard.DisplayName" class="img-fluid" />
                <figcaption>@selectedCard.DisplayName</figcaption>
            </figure>

            <section id="@CardDescriptionElementId" class="tarot-card-description" aria-live="polite" @ref="cardDescriptionRef">
                @if (!string.IsNullOrEmpty(descriptionError))
                {
                    <p class="text-danger">@descriptionError</p>
                }
                else if (!string.IsNullOrEmpty(selectedCardDescriptionHtml))
                {
                    <div class="tarot-card-description-content">@((MarkupString)selectedCardDescriptionHtml)</div>
                }
            </section>
        }
    </div>

    @if (selectedCard is not null)
    {
        <nav class="tarot-navigation-bar" >
            <button type="button"
                    class="btn btn-outline-secondary"
                    aria-label="@DisplayTexts.TarotPreviousCardButton"
                    title="@DisplayTexts.TarotPreviousCardButton"
                    disabled="@(!CanNavigateCards)"
                    @onclick="ShowPreviousCardAsync">
                &larr;
            </button>

            <button type="button"
                    class="btn btn-outline-secondary"
                    aria-label="@DisplayTexts.TarotNextCardButton"
                    title="@DisplayTexts.TarotNextCardButton"
                    disabled="@(!CanNavigateCards)"
                    @onclick="ShowNextCardAsync">
                &rarr;
            </button>
        </nav>
    }
}


