@page "/card-deck"
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Markdig
@using Toolbox.Helpers
@using Toolbox.Models
@inject IndexedDbHelper DbHelper
@inject IJSRuntime JsRuntime
@inject LocalStorageHelper LocalStorage

<PageTitle>@DisplayTexts.TarotPageTitle</PageTitle>

@if (isLoadingDecks)
{
    <div class="deck-loading" role="status" aria-live="polite">
        <div class="spinner-border text-primary me-3" aria-hidden="true"></div>
        <span class="deck-loading-text">@DisplayTexts.TarotDeckLoading</span>
    </div>
}
else
{
    @if (isHelpVisible)
    {
        <div class="deck-help-overlay" role="dialog" aria-modal="true" aria-labelledby="deck-help-title" @onclick="CloseHelp">
            <div class="deck-help-dialog" role="document" @onclick:stopPropagation="true">
                <button type="button" class="deck-help-close" @onclick="CloseHelp" aria-label="@DisplayTexts.TarotHelpCloseButtonLabel">&times;</button>
                <div class="deck-help-dialog-content">
                    <h2 id="deck-help-title">@currentHelpTitle</h2>
                    <div class="deck-help-dialog-scroll">
                        @helpContent
                    </div>
                </div>
            </div>
        </div>
    }

    <header class="deck-page-header" aria-labelledby="deck-page-heading">
        <div class="deck-header-description">
            <div class="deck-header-title-row">
                <h1 id="deck-page-heading">@DisplayTexts.TarotPageTitle</h1>
                <button type="button"
                        class="deck-help-button"
                        aria-label="@GetHelpButtonLabel(DisplayTexts.TarotPageDescriptionHeading)"
                        @onclick="@(() => ShowHelpAsync("card-deck-overview", DisplayTexts.TarotPageDescriptionHeading))">
                    ?
                </button>
            </div>
            <p class="deck-header-text">@DisplayTexts.TarotPageDescriptionText</p>
        </div>
        <div class="deck-header-actions">
            <label class="visually-hidden" for="cardNameInput">@DisplayTexts.TarotSearchLabel</label>
            <div class="deck-search-input">
                <input id="cardNameInput"
                       class="form-control"
                       @bind="SearchTerm"
                       @bind:event="oninput"
                       placeholder="@DisplayTexts.TarotSearchLabel"
                       title="@DisplayTexts.TarotSearchPlaceholder"
                       aria-label="@DisplayTexts.TarotSearchLabel"
                       disabled="@(!IsSearchEnabled)" />
                <button type="button"
                        class="deck-help-button"
                        aria-label="@GetHelpButtonLabel(DisplayTexts.TarotSearchLabel)"
                        @onclick="@(() => ShowHelpAsync("card-deck-search", DisplayTexts.TarotSearchLabel))">
                    ?
                </button>
            </div>
        </div>
    </header>

    <section class="deck-selection" aria-labelledby="deckSelectionLabel">
        <div class="deck-selection-label">
            <label id="deckSelectionLabel" for="deckSelection">@DisplayTexts.TarotDeckSelectionLabel</label>
            <button type="button"
                    class="deck-help-button"
                    aria-label="@GetHelpButtonLabel(DisplayTexts.TarotDeckSelectionLabel)"
                    @onclick="@(() => ShowHelpAsync("card-deck-selection", DisplayTexts.TarotDeckSelectionLabel))">
                ?
            </button>
        </div>
        <div class="deck-selection-input">
            <select id="deckSelection"
                    class="form-select"
                    title="@DisplayTexts.TarotDeckSelectionPlaceholder"
                    aria-label="@DisplayTexts.TarotDeckSelectionLabel"
                    @bind="SelectedDeck">
                <option value="">@DisplayTexts.TarotDeckSelectionLabel</option>
                @foreach (var option in DeckOptions)
                {
                    <option value="@option.DeckId">@option.DisplayName</option>
                }
            </select>
        </div>
    </section>

    <div class="deck-page">

        @if (selectedCard is not null)
        {
            <div class="deck-scroll-control">
                <button type="button"
                        class="btn btn-outline-primary deck-scroll-button"
                        title="@DisplayTexts.TarotScrollToDescriptionLabel"
                        aria-controls="@CardDescriptionElementId"
                        @onclick="ScrollToDescriptionAsync">
                    <span aria-hidden="true">⬇️</span>
                    <span class="visually-hidden">@DisplayTexts.TarotScrollToDescriptionLabel</span>
                </button>
            </div>
        }

        @if (HasSearched && selectedCard is null && !isLoadingCards)
        {
            <p class="text-danger">@DisplayTexts.TarotSearchNotFound</p>
        }

        @if (isLoadingCards && IsDeckSelected)
        {
            <div class="deck-loading" role="status" aria-live="polite">
                <div class="spinner-border text-primary me-3" aria-hidden="true"></div>
                <span class="deck-loading-text">@DisplayTexts.TarotDeckLoading</span>
            </div>
        }
        else if (selectedCard is not null)
        {
            <figure class="deck-card"
                    id="@CardFigureElementId"
                    @ref="cardFigureRef"
                    data-fullscreen="@CardFigureFullscreenValue"
                    style="@CardFigureStyle"
                    role="button"
                    tabindex="0"
                    aria-pressed="@CardFigureFullscreenValue"
                    aria-label="@DisplayTexts.TarotToggleFullscreenLabel"
                    title="@DisplayTexts.TarotToggleFullscreenLabel"
                    @onclick="ToggleCardFullscreen"
                    @onkeydown="HandleCardKeyDown"
                    @onpointerdown="HandlePointerDown"
                    @onpointerup="HandlePointerUpAsync"
                    @onpointercancel="HandlePointerCancel">
                <img src="@selectedCard.ImageDataUrl" alt="@selectedCard.DisplayName" class="img-fluid" />
                <figcaption>@selectedCard.DisplayName</figcaption>
            </figure>

            <section id="@CardDescriptionElementId" class="deck-card-description" aria-live="polite" @ref="cardDescriptionRef">
                @if (!string.IsNullOrEmpty(descriptionError))
                {
                    <p class="text-danger">@descriptionError</p>
                }
                else if (!string.IsNullOrEmpty(selectedCardDescriptionHtml))
                {
                    <div class="deck-card-description-content">@((MarkupString)selectedCardDescriptionHtml)</div>
                }
            </section>
        }
    </div>

    @if (selectedCard is not null)
    {
        <nav class="deck-navigation-bar" >
            <button type="button"
                    class="btn btn-outline-secondary"
                    aria-label="@DisplayTexts.TarotPreviousCardButton"
                    title="@DisplayTexts.TarotPreviousCardButton"
                    disabled="@(!CanNavigateCards)"
                    @onclick="ShowPreviousCardAsync">
                &larr;
            </button>

            <button type="button"
                    class="btn btn-outline-secondary"
                    aria-label="@DisplayTexts.TarotNextCardButton"
                    title="@DisplayTexts.TarotNextCardButton"
                    disabled="@(!CanNavigateCards)"
                    @onclick="ShowNextCardAsync">
                &rarr;
            </button>
        </nav>
    }
}


