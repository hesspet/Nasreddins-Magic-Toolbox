@page "/tests/foto-component2"

@* Diese Beispielseite demonstriert, wie der Fotoaufnahme-Workflow ohne Seitenwechsel funktioniert.
   Über den Button wird das untergeordnete <FotoCaptureComponent> ausgelöst. Nach erfolgreicher
   Aufnahme wird die Bildkennung im temporären Speicher nachgeschlagen, in eine Data-URL gewandelt
   und direkt im Browser angezeigt. So lässt sich das Verhalten der Komponente isoliert testen. *@

<PageTitle>Foto Component Test 2</PageTitle>

<h1>Foto Component Test 2</h1>

<button class="btn btn-primary" @onclick="TriggerCapture">Jetzt ein Bild aufnehmen</button>

@if (!string.IsNullOrEmpty(_currentImageDataUrl))
{
    <div class="mt-3">
        <img src="@_currentImageDataUrl" alt="Aufgenommenes Foto" style="max-width:300px;max-height:300px;width:auto;height:auto;" />
    </div>
}

<FotoCaptureComponent @ref="_fotoComponent" OnPhotoCaptured="HandlePhotoCaptured" />

@code {
    private FotoCaptureComponent? _fotoComponent;
    private string? _currentImageDataUrl;

    [Inject]
    private TemporaryImageStorage ImageStorageTemporary { get; set; } = default!;

    private async Task TriggerCapture()
    {
        if (_fotoComponent is not null)
        {
            await _fotoComponent.TriggerCaptureAsync();
        }
    }

    private Task HandlePhotoCaptured(string imageId)
    {
        _currentImageDataUrl = null;

        if (ImageStorageTemporary.TryGetImage(imageId, out var image))
        {
            _currentImageDataUrl = image.ToDataUrl();
        }

        return Task.CompletedTask;
    }
}
