@page "/settings"
@inject LocalStorageHelper LocalStorage

<PageTitle>@DisplayTexts.SettingsPageTitle</PageTitle>

<h1>@DisplayTexts.SettingsPageHeader</h1>

<section class="settings-section" aria-labelledby="splash-duration-label">
    <label id="splash-duration-label" for="splash-duration">@DisplayTexts.SettingsSplashDurationLabel</label>
    <select id="splash-duration" class="form-select" @onchange="OnDurationChanged">
        @foreach (var option in ApplicationSettings.SplashScreenDurationOptions)
        {
            <option value="@option" selected="@(option == selectedDuration ? "selected" : null)">@option</option>
        }
    </select>
    <p class="settings-description">@DisplayTexts.SettingsSplashDurationDescription</p>
</section>

<section class="settings-section" aria-labelledby="update-check-label">
    <div class="form-check form-switch">
        <input
            id="check-updates-on-startup"
            class="form-check-input"
            type="checkbox"
            role="switch"
            checked="@checkForUpdatesOnStartup"
            @onchange="OnCheckForUpdatesChanged" />
        <label id="update-check-label" class="form-check-label" for="check-updates-on-startup">
            @DisplayTexts.SettingsCheckForUpdatesLabel
        </label>
    </div>
    <p class="settings-description">@DisplayTexts.SettingsCheckForUpdatesDescription</p>
</section>

@code {
    private int selectedDuration = ApplicationSettings.SplashScreenDurationDefaultSeconds;
    private bool checkForUpdatesOnStartup = ApplicationSettings.CheckForUpdatesOnStartupDefault;

    protected override async Task OnInitializedAsync()
    {
        var storedDuration = await LocalStorage.GetItemAsync<int?>(ApplicationSettings.SplashScreenDurationKey);

        if (storedDuration.HasValue && Array.IndexOf(ApplicationSettings.SplashScreenDurationOptions, storedDuration.Value) >= 0)
        {
            selectedDuration = storedDuration.Value;
        }
        else
        {
            await LocalStorage.SetItemAsync(ApplicationSettings.SplashScreenDurationKey, selectedDuration);
        }

        var storedUpdatePreference = await LocalStorage.GetItemAsync<bool?>(ApplicationSettings.CheckForUpdatesOnStartupKey);

        if (storedUpdatePreference.HasValue)
        {
            checkForUpdatesOnStartup = storedUpdatePreference.Value;
        }
        else
        {
            await LocalStorage.SetItemAsync(ApplicationSettings.CheckForUpdatesOnStartupKey, checkForUpdatesOnStartup);
        }
    }

    private async Task OnDurationChanged(ChangeEventArgs args)
    {
        if (args.Value is null)
        {
            return;
        }

        if (int.TryParse(args.Value.ToString(), out var duration) && Array.IndexOf(ApplicationSettings.SplashScreenDurationOptions, duration) >= 0)
        {
            selectedDuration = duration;
            await LocalStorage.SetItemAsync(ApplicationSettings.SplashScreenDurationKey, selectedDuration);
            StateHasChanged();
        }
    }

    private async Task OnCheckForUpdatesChanged(ChangeEventArgs args)
    {
        if (args.Value is bool boolValue)
        {
            checkForUpdatesOnStartup = boolValue;
        }
        else if (args.Value is string stringValue && bool.TryParse(stringValue, out var parsedValue))
        {
            checkForUpdatesOnStartup = parsedValue;
        }
        else
        {
            return;
        }

        await LocalStorage.SetItemAsync(ApplicationSettings.CheckForUpdatesOnStartupKey, checkForUpdatesOnStartup);
        StateHasChanged();
    }
}
