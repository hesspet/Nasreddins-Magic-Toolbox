@page "/settings"
@inject LocalStorageHelper LocalStorage
@inject HelpContentProvider HelpContentProvider

<PageTitle>@DisplayTexts.SettingsPageTitle</PageTitle>

<h1>@DisplayTexts.SettingsPageHeader</h1>

@if (isHelpVisible)
{
    <div class="settings-help-overlay" role="dialog" aria-modal="true" aria-labelledby="settings-help-title" @onclick="CloseHelp">
        <div class="settings-help-dialog" role="document" @onclick:stopPropagation="true">
            <button type="button" class="settings-help-close" @onclick="CloseHelp" aria-label="@DisplayTexts.SettingsHelpCloseButtonLabel">
                &times;
            </button>
            <div class="settings-help-dialog-content">
                <h2 id="settings-help-title">@currentHelpTitle</h2>
                <div class="settings-help-dialog-scroll">
                    @helpContent
                </div>
            </div>
        </div>
    </div>
}

<section class="settings-section" aria-labelledby="splash-duration-label">
    <div class="settings-label-row">
        <label id="splash-duration-label" for="splash-duration">@DisplayTexts.SettingsSplashDurationLabel</label>
        <button
            type="button"
            class="settings-help-button"
            aria-label="@GetHelpButtonLabel(DisplayTexts.SettingsSplashDurationLabel)"
            @onclick="@(() => ShowHelpAsync("splash-duration", DisplayTexts.SettingsSplashDurationLabel))">
            ?
        </button>
    </div>
    <select id="splash-duration" class="form-select" @onchange="OnDurationChanged">
        @foreach (var option in ApplicationSettings.SplashScreenDurationOptions)
        {
            <option value="@option" selected="@(option == selectedDuration ? "selected" : null)">@option</option>
        }
    </select>
    <p class="settings-description">@DisplayTexts.SettingsSplashDurationDescription</p>
</section>

<section class="settings-section" aria-labelledby="card-scale-label">
    <div class="settings-label-row">
        <label id="card-scale-label" for="card-scale">@string.Format(DisplayTexts.SettingsCardScaleLabel, cardScalePercent)</label>
        <button
            type="button"
            class="settings-help-button"
            aria-label="@GetHelpButtonLabel(string.Format(DisplayTexts.SettingsCardScaleLabel, cardScalePercent))"
            @onclick="@(() => ShowHelpAsync("card-scale", string.Format(DisplayTexts.SettingsCardScaleLabel, cardScalePercent)))">
            ?
        </button>
    </div>
    <input
        id="card-scale"
        class="form-range"
        type="range"
        min="@ApplicationSettings.CardScalePercentMinimum"
        max="@ApplicationSettings.CardScalePercentMaximum"
        value="@cardScalePercent"
        @oninput="OnCardScaleChanged" />
    <div class="settings-card-scale-control">
        <input
            id="card-scale-number"
            class="form-control"
            type="number"
            min="@ApplicationSettings.CardScalePercentMinimum"
            max="@ApplicationSettings.CardScalePercentMaximum"
            value="@cardScalePercent"
            @onchange="OnCardScaleNumberChanged" />
        <span class="settings-card-scale-suffix">%</span>
    </div>
    <p class="settings-description">@DisplayTexts.SettingsCardScaleDescription</p>
</section>

<section class="settings-section" aria-labelledby="search-auto-clear-label">
    <div class="settings-label-row">
        <label id="search-auto-clear-label" for="search-auto-clear">@DisplayTexts.SettingsSearchAutoClearLabel</label>
        <button
            type="button"
            class="settings-help-button"
            aria-label="@GetHelpButtonLabel(DisplayTexts.SettingsSearchAutoClearLabel)"
            @onclick="@(() => ShowHelpAsync("search-auto-clear", DisplayTexts.SettingsSearchAutoClearLabel))">
            ?
        </button>
    </div>
    <input
        id="search-auto-clear"
        class="form-control"
        type="number"
        min="@ApplicationSettings.SearchAutoClearDelayMinimumSeconds"
        max="@ApplicationSettings.SearchAutoClearDelayMaximumSeconds"
        value="@searchAutoClearDelaySeconds"
        @onchange="OnSearchAutoClearDelayChanged" />
    <p class="settings-description">@DisplayTexts.SettingsSearchAutoClearDescription</p>
</section>

<section class="settings-section" aria-labelledby="update-check-label">
    <div class="form-check form-switch">
        <input
            id="check-updates-on-startup"
            class="form-check-input"
            type="checkbox"
            role="switch"
            checked="@checkForUpdatesOnStartup"
            @onchange="OnCheckForUpdatesChanged" />
        <div class="settings-label-row">
            <label id="update-check-label" class="form-check-label" for="check-updates-on-startup">
                @DisplayTexts.SettingsCheckForUpdatesLabel
            </label>
            <button
                type="button"
                class="settings-help-button"
                aria-label="@GetHelpButtonLabel(DisplayTexts.SettingsCheckForUpdatesLabel)"
                @onclick="@(() => ShowHelpAsync("check-updates-on-startup", DisplayTexts.SettingsCheckForUpdatesLabel))">
                ?
            </button>
        </div>
    </div>
    <p class="settings-description">@DisplayTexts.SettingsCheckForUpdatesDescription</p>
</section>


